stages:
- build
- lint
- tests
- review
- publish
- cleanup

default:
  image: ghcr.io/werf/werf:1.2-alpha
  before_script:
  - source <(werf ci-env gitlab)
  tags: ["kubernetes-runner-for-werf"]

variables:
  CLUSTER_DOMAIN: kube-dev.flant.com

.base_build:
  stage: build
  variables:
    WERF_REPORT_FORMAT: envfile
    WERF_REPORT_PATH: report.env
  only:
  - main
  - merge_requests
  except:
  - schedules
  artifacts:
    reports:
      dotenv: report.env

Build emailservice:
  extends: ".base_build"
  script:
  - werf build emailservice emailservice-src

Build productcatalogservice:
  extends: ".base_build"
  script:
  - werf build productcatalogservice productcatalogservice-src

Build recommendationservice:
  extends: ".base_build"
  script:
  - werf build recommendationservice

Build shippingservice:
  extends: ".base_build"
  script:
  - werf build shippingservice shippingservice-src

Build checkoutservice:
  extends: ".base_build"
  script:
  - werf build checkoutservice checkoutservice-src

Build paymentservice:
  extends: ".base_build"
  script:
  - werf build paymentservice paymentservice-src

Build currencyservice:
  extends: ".base_build"
  script:
  - werf build currencyservice currencyservice-src

Build cartservice:
  extends: ".base_build"
  script:
  - werf build cartservice cartservice-src

Build frontend:
  extends: ".base_build"
  script:
  - werf build frontend frontend-src

Build adservice:
  extends: ".base_build"
  script:
  - werf build adservice adservice-src

Build functional-tests:
  extends: ".base_build"
  script:
  - werf build functional-tests
  only:
  - main

.base_lint:
  stage: lint
  variables:
    WERF_NAMESPACE: $CI_PROJECT_NAME-lint-$CI_JOB_ID
  before_script:
  - kubectl create ns $WERF_NAMESPACE
  after_script:
  - kubectl delete ns $WERF_NAMESPACE --wait=false
  only:
  - main
  - merge_requests
  except:
  - schedules
  tags: ["tfprod-distributed-werf"]

Lint cartservice:
  extends: ".base_lint"
  script:
  # TODO: replace with "werf kube-run"
  - |
    kubectl -n $WERF_NAMESPACE run --generator=run-pod/v1 lint-cartservice --image=$WERF_CARTSERVICE_SRC_DOCKER_IMAGE_NAME --rm -i --restart=Never --command --overrides='{"spec": {"imagePullSecrets": [{"name": "registrysecret"}]}}' -- make lint
  dependencies:
  - "Build cartservice"

Lint frontend:
  extends: ".base_lint"
  script:
  # TODO: replace with "werf kube-run"
  - |
    kubectl -n $WERF_NAMESPACE run --generator=run-pod/v1 lint-frontend --image=$WERF_FRONTEND_SRC_DOCKER_IMAGE_NAME --rm -i --restart=Never --command --overrides='{"spec": {"imagePullSecrets": [{"name": "registrysecret"}]}}' -- make lint
  dependencies:
  - "Build frontend"

Lint productcatalogservice:
  extends: ".base_lint"
  script:
  # TODO: replace with "werf kube-run"
  - |
    kubectl -n $WERF_NAMESPACE run --generator=run-pod/v1 lint-productcatalogservice --image=$WERF_PRODUCTCATALOGSERVICE_SRC_DOCKER_IMAGE_NAME --rm -i --restart=Never --command --overrides='{"spec": {"imagePullSecrets": [{"name": "registrysecret"}]}}' -- make lint
  dependencies:
  - "Build productcatalogservice"

Lint shippingservice:
  extends: ".base_lint"
  script:
  # TODO: replace with "werf kube-run"
  - |
    kubectl -n $WERF_NAMESPACE run --generator=run-pod/v1 lint-shippingservice --image=$WERF_SHIPPINGSERVICE_SRC_DOCKER_IMAGE_NAME --rm -i --restart=Never --command --overrides='{"spec": {"imagePullSecrets": [{"name": "registrysecret"}]}}' -- make lint
  dependencies:
  - "Build shippingservice"

Lint checkoutservice:
  extends: ".base_lint"
  script:
  # TODO: replace with "werf kube-run"
  - |
    kubectl -n $WERF_NAMESPACE run --generator=run-pod/v1 lint-checkoutservice --image=$WERF_CHECKOUTSERVICE_SRC_DOCKER_IMAGE_NAME --rm -i --restart=Never --command --overrides='{"spec": {"imagePullSecrets": [{"name": "registrysecret"}]}}' -- make lint
  dependencies:
  - "Build checkoutservice"

Lint paymentservice:
  extends: ".base_lint"
  script:
  # TODO: replace with "werf kube-run"
  - |
    kubectl -n $WERF_NAMESPACE run --generator=run-pod/v1 lint-paymentservice --image=$WERF_PAYMENTSERVICE_SRC_DOCKER_IMAGE_NAME --rm -i --restart=Never --command --overrides='{"spec": {"imagePullSecrets": [{"name": "registrysecret"}]}}' -- make lint
  dependencies:
  - "Build paymentservice"

Lint currencyservice:
  extends: ".base_lint"
  script:
  # TODO: replace with "werf kube-run"
  - |
    kubectl -n $WERF_NAMESPACE run --generator=run-pod/v1 lint-currencyservice --image=$WERF_CURRENCYSERVICE_SRC_DOCKER_IMAGE_NAME --rm -i --restart=Never --command --overrides='{"spec": {"imagePullSecrets": [{"name": "registrysecret"}]}}' -- make lint
  dependencies:
  - "Build currencyservice"

.base_unit_tests:
  stage: tests
  variables:
    WERF_NAMESPACE: $CI_PROJECT_NAME-unit-tests-$CI_JOB_ID
  before_script:
  - kubectl create ns $WERF_NAMESPACE
  after_script:
  - kubectl delete ns $WERF_NAMESPACE --wait=false
  only:
  - main
  - merge_requests
  except:
  - schedules
  tags: ["tfprod-distributed-werf"]

Unit-tests cartservice:
  extends: ".base_unit_tests"
  script:
  # TODO: replace with "werf kube-run"
  - |
    kubectl -n $WERF_NAMESPACE run --generator=run-pod/v1 unit-tests-cartservice --image=$WERF_CARTSERVICE_SRC_DOCKER_IMAGE_NAME --rm -i --restart=Never --command --overrides='{"spec": {"imagePullSecrets": [{"name": "registrysecret"}]}}' -- make unit-tests
  dependencies:
  - "Build cartservice"

Unit-tests frontend:
  extends: ".base_unit_tests"
  script:
  # TODO: replace with "werf kube-run"
  - |
    kubectl -n $WERF_NAMESPACE run --generator=run-pod/v1 unit-tests-frontend --image=$WERF_FRONTEND_SRC_DOCKER_IMAGE_NAME --rm -i --restart=Never --command --overrides='{"spec": {"imagePullSecrets": [{"name": "registrysecret"}]}}' -- make unit-tests
  dependencies:
  - "Build frontend"

Unit-tests productcatalogservice:
  extends: ".base_unit_tests"
  script:
  # TODO: replace with "werf kube-run"
  - |
    kubectl -n $WERF_NAMESPACE run --generator=run-pod/v1 unit-tests-productcatalogservice --image=$WERF_PRODUCTCATALOGSERVICE_SRC_DOCKER_IMAGE_NAME --rm -i --restart=Never --command --overrides='{"spec": {"imagePullSecrets": [{"name": "registrysecret"}]}}' -- make unit-tests
  dependencies:
  - "Build productcatalogservice"

Unit-tests shippingservice:
  extends: ".base_unit_tests"
  script:
  # TODO: replace with "werf kube-run"
  - |
    kubectl -n $WERF_NAMESPACE run --generator=run-pod/v1 unit-tests-shippingservice --image=$WERF_SHIPPINGSERVICE_SRC_DOCKER_IMAGE_NAME --rm -i --restart=Never --command --overrides='{"spec": {"imagePullSecrets": [{"name": "registrysecret"}]}}' -- make unit-tests
  dependencies:
  - "Build shippingservice"

Unit-tests checkoutservice:
  extends: ".base_unit_tests"
  script:
  # TODO: replace with "werf kube-run"
  - |
    kubectl -n $WERF_NAMESPACE run --generator=run-pod/v1 unit-tests-checkoutservice --image=$WERF_CHECKOUTSERVICE_SRC_DOCKER_IMAGE_NAME --rm -i --restart=Never --command --overrides='{"spec": {"imagePullSecrets": [{"name": "registrysecret"}]}}' -- make unit-tests
  dependencies:
  - "Build checkoutservice"

.base_review:
  stage: review
  environment:
    name: review/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME-$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    url: https://$CI_PROJECT_NAME-$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME-$CI_MERGE_REQUEST_TARGET_BRANCH_NAME.$CLUSTER_DOMAIN
  variables:
    WERF_ENV: review
    WERF_SET_DOMAIN: domain=$CI_PROJECT_NAME-$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME-$CI_MERGE_REQUEST_TARGET_BRANCH_NAME.$CLUSTER_DOMAIN
    WERF_SET_ANNOTATIONS: annotations.nginx\.ingress\.kubernetes\.io/auth-url="http://basic-auth.kube-basic-auth.svc.cluster.local/argo"
  only:
  - merge_requests
  except:
  - schedules

Deploy review:
  extends: ".base_review"
  environment:
    on_stop: "Stop review"
  script:
  - werf converge

Stop review:
  extends: ".base_review"
  # TODO: will it work without it?
  # variables:
  #   GIT_STRATEGY: "none"
  script:
  - werf dismiss --with-namespace
  environment:
    action: stop
  when: manual

Functional tests:
  stage: tests
  resource_group: functional-tests
  environment:
    name: functional-tests
  variables:
    WERF_SET_DOMAIN: domain=$CI_PROJECT_NAME-functional-tests.$CLUSTER_DOMAIN
  script:
  - werf dismiss || true
  - werf converge
  after_script:
  - werf dismiss --with-namespace
  only:
  - main
  except:
  - schedules

Publish bundle:
  stage: publish
  script:
  - werf bundle publish --tag "0.1.${CI_PIPELINE_ID}"
  only:
  - main
  except:
  - schedules

Werf cleanup:
  stage: cleanup
  script:
  - werf cr login "$WERF_REPO"
  - werf cleanup
  only:
  - schedules
